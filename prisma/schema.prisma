// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String

  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  password       String?
  nickname       String?
  isVirtual      Boolean?  @default(false)
  createdAt      DateTime @default(now())
  isActive       Boolean   @default(false)
  changePassword String?
  kittys         Kitty[]

  ProductIDs          String[]  @db.ObjectId
  products            Product[] @relation(fields: [ProductIDs], references: [id])
  outgoingInvitations String[]  @db.ObjectId
  incomingInvitations String[]  @db.ObjectId
  friends             String[]  @db.ObjectId
}

model Product {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  price Float

  userIDs String[] @db.ObjectId
  users   User[]   @relation(fields: [userIDs], references: [id])

  Kitty   Kitty?  @relation(fields: [kittyId], references: [id])
  kittyId String? @db.ObjectId
}

model Kitty {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  owner  User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  name           String
  createdAt      DateTime @default(now())
  description    String
  totalValue     Float    @default(0)
  isEnded        Boolean  @default(false)
  receiptsPhotos Bytes?

  users String[] @db.ObjectId

  products Product[]
}
